---
swagger: "2.0"
info:
  description: "API Guide for accessing MLP API"
  version: "0.4.0"
  title: "MLP API"
host: "localhost:8080"
basePath: "/v1"
tags:
- name: "project"
  description: "Project Management API. Project is used to namespace model, secret,\
    \ and user access"
- name: "secret"
  description: "Secret Management API. Secret is stored securely inside merlin and\
    \ can be used to run prediction job"
schemes:
- "http"
security:
- Bearer: []
paths:
  /projects:
    get:
      tags:
      - "project"
      summary: "List existing projects"
      description: "Projects can be filtered by optional `name` parameter"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
    post:
      tags:
      - "project"
      summary: "Create new project"
      parameters:
      - in: "body"
        name: "body"
        description: "Project object that has to be added"
        required: true
        schema:
          $ref: "#/definitions/Project"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/Project"
        "400":
          description: "Invalid request format"
        "409":
          description: "Project with the same name already exists"
  /projects/{project_id}:
    get:
      tags:
      - "project"
      summary: "Get project"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id of the project to be retrieved"
        required: true
        type: "integer"
        x-exportParamName: "ProjectID"
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/Project"
        "404":
          description: "Project Not Found"
    put:
      tags:
      - "project"
      summary: "Update project"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id of the project to be updated"
        required: true
        type: "integer"
        x-exportParamName: "ProjectID"
      - in: "body"
        name: "body"
        description: "Project object that has to be updated"
        required: true
        schema:
          $ref: "#/definitions/Project"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/Project"
        "400":
          description: "Invalid request format"
  /projects/{project_id}/secrets:
    get:
      tags:
      - "secret"
      summary: "List secret"
      parameters:
      - name: "project_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "ProjectID"
      responses:
        "201":
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Secret"
    post:
      tags:
      - "secret"
      summary: "Create secret"
      parameters:
      - name: "project_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "ProjectID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Secret"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/Secret"
  /projects/{project_id}/secrets/{secret_id}:
    delete:
      tags:
      - "secret"
      summary: "Delete secret"
      parameters:
      - name: "project_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "ProjectID"
      - name: "secret_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "SecretId"
      responses:
        "204":
          description: "No content"
    patch:
      tags:
      - "secret"
      summary: "Update secret"
      parameters:
      - name: "project_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "ProjectID"
      - name: "secret_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "SecretId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Secret"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Updated"
          schema:
            $ref: "#/definitions/Secret"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  Project:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      mlflow_tracking_url:
        type: "string"
      administrators:
        type: "array"
        items:
          type: "string"
      readers:
        type: "array"
        items:
          type: "string"
      team:
        type: "string"
      stream:
        type: "string"
      labels:
        type: "array"
        items:
          $ref: "#/definitions/Label"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
    example:
      updated_at: "2000-01-23T04:56:07.000+00:00"
      readers:
      - "readers"
      - "readers"
      stream: "stream"
      name: "name"
      created_at: "2000-01-23T04:56:07.000+00:00"
      id: 0
      team: "team"
      mlflow_tracking_url: "mlflow_tracking_url"
      administrators:
      - "administrators"
      - "administrators"
      labels:
      - value: "value"
        key: "key"
      - value: "value"
        key: "key"
  Label:
    type: "object"
    properties:
      key:
        type: "string"
      value:
        type: "string"
    example:
      value: "value"
      key: "key"
  Secret:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      data:
        type: "string"
    example:
      data: "data"
      name: "name"
      id: 0

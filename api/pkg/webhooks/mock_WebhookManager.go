// Code generated by mockery v2.42.1. DO NOT EDIT.

package webhooks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockWebhookManager is an autogenerated mock type for the WebhookManager type
type MockWebhookManager struct {
	mock.Mock
}

// InvokeWebhooks provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockWebhookManager) InvokeWebhooks(_a0 context.Context, _a1 EventType, _a2 interface{}, _a3 func([]byte) error, _a4 func(error) error) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for InvokeWebhooks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, EventType, interface{}, func([]byte) error, func(error) error) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockWebhookManager creates a new instance of MockWebhookManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebhookManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebhookManager {
	mock := &MockWebhookManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.1. DO NOT EDIT.

package webhooks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockWebhookClient is an autogenerated mock type for the WebhookClient type
type MockWebhookClient struct {
	mock.Mock
}

// GetName provides a mock function with given fields:
func (_m *MockWebhookClient) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUseDataFrom provides a mock function with given fields:
func (_m *MockWebhookClient) GetUseDataFrom() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUseDataFrom")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Invoke provides a mock function with given fields: _a0, _a1
func (_m *MockWebhookClient) Invoke(_a0 context.Context, _a1 []byte) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Invoke")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ([]byte, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAsync provides a mock function with given fields:
func (_m *MockWebhookClient) IsAsync() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsAsync")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsFinalResponse provides a mock function with given fields:
func (_m *MockWebhookClient) IsFinalResponse() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsFinalResponse")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMockWebhookClient creates a new instance of MockWebhookClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebhookClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebhookClient {
	mock := &MockWebhookClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

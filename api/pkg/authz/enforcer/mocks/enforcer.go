// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	enforcer "github.com/caraml-dev/mlp/api/pkg/authz/enforcer"
)

// Enforcer is an autogenerated mock type for the Enforcer type
type Enforcer struct {
	mock.Mock
}

// GetRoleMembers provides a mock function with given fields: ctx, role
func (_m *Enforcer) GetRoleMembers(ctx context.Context, role string) ([]string, error) {
	ret := _m.Called(ctx, role)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRolePermissions provides a mock function with given fields: ctx, role
func (_m *Enforcer) GetRolePermissions(ctx context.Context, role string) ([]string, error) {
	ret := _m.Called(ctx, role)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPermissions provides a mock function with given fields: ctx, user
func (_m *Enforcer) GetUserPermissions(ctx context.Context, user string) ([]string, error) {
	ret := _m.Called(ctx, user)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRoles provides a mock function with given fields: ctx, user
func (_m *Enforcer) GetUserRoles(ctx context.Context, user string) ([]string, error) {
	ret := _m.Called(ctx, user)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserGrantedPermission provides a mock function with given fields: ctx, user, permission
func (_m *Enforcer) IsUserGrantedPermission(ctx context.Context, user string, permission string) (bool, error) {
	ret := _m.Called(ctx, user, permission)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, user, permission)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, user, permission)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, user, permission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthorization provides a mock function with given fields: ctx, updateRequest
func (_m *Enforcer) UpdateAuthorization(ctx context.Context, updateRequest enforcer.AuthorizationUpdateRequest) error {
	ret := _m.Called(ctx, updateRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, enforcer.AuthorizationUpdateRequest) error); ok {
		r0 = rf(ctx, updateRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEnforcer creates a new instance of Enforcer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnforcer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Enforcer {
	mock := &Enforcer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

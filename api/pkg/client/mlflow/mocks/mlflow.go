// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeleteExperiment provides a mock function with given fields: ctx, ExperimentID, deleteArtifact
func (_m *Service) DeleteExperiment(ctx context.Context, ExperimentID string, deleteArtifact bool) error {
	ret := _m.Called(ctx, ExperimentID, deleteArtifact)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, ExperimentID, deleteArtifact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRun provides a mock function with given fields: ctx, RunID, artifactURL, deleteArtifact
func (_m *Service) DeleteRun(ctx context.Context, RunID string, artifactURL string, deleteArtifact bool) error {
	ret := _m.Called(ctx, RunID, artifactURL, deleteArtifact)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, RunID, artifactURL, deleteArtifact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

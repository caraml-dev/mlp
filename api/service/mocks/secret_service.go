// Code generated by mockery v2.0.0-alpha.14. DO NOT EDIT.

package mocks

import (
	models "github.com/caraml-dev/mlp/api/models"
	mock "github.com/stretchr/testify/mock"
)

// SecretService is an autogenerated mock type for the SecretService type
type SecretService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: secretID, projectID
func (_m *SecretService) Delete(secretID models.ID, projectID models.ID) error {
	ret := _m.Called(secretID, projectID)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ID, models.ID) error); ok {
		r0 = rf(secretID, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByIDAndProjectID provides a mock function with given fields: secretID, projectID
func (_m *SecretService) FindByIDAndProjectID(secretID models.ID, projectID models.ID) (*models.Secret, error) {
	ret := _m.Called(secretID, projectID)

	var r0 *models.Secret
	if rf, ok := ret.Get(0).(func(models.ID, models.ID) *models.Secret); ok {
		r0 = rf(secretID, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID, models.ID) error); ok {
		r1 = rf(secretID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecret provides a mock function with given fields: projectID
func (_m *SecretService) ListSecret(projectID models.ID) ([]*models.Secret, error) {
	ret := _m.Called(projectID)

	var r0 []*models.Secret
	if rf, ok := ret.Get(0).(func(models.ID) []*models.Secret); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: secret
func (_m *SecretService) Save(secret *models.Secret) (*models.Secret, error) {
	ret := _m.Called(secret)

	var r0 *models.Secret
	if rf, ok := ret.Get(0).(func(*models.Secret) *models.Secret); ok {
		r0 = rf(secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Secret) error); ok {
		r1 = rf(secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

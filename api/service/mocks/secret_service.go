// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	models "github.com/caraml-dev/mlp/api/models"
)

// SecretService is an autogenerated mock type for the SecretService type
type SecretService struct {
	mock.Mock
}

// Create provides a mock function with given fields: secret
func (_m *SecretService) Create(secret *models.Secret) (*models.Secret, error) {
	ret := _m.Called(secret)

	var r0 *models.Secret
	if rf, ok := ret.Get(0).(func(*models.Secret) *models.Secret); ok {
		r0 = rf(secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Secret) error); ok {
		r1 = rf(secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: secretID
func (_m *SecretService) Delete(secretID models.ID) error {
	ret := _m.Called(secretID)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ID) error); ok {
		r0 = rf(secretID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: secretID
func (_m *SecretService) FindByID(secretID models.ID) (*models.Secret, error) {
	ret := _m.Called(secretID)

	var r0 *models.Secret
	if rf, ok := ret.Get(0).(func(models.ID) *models.Secret); ok {
		r0 = rf(secretID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID) error); ok {
		r1 = rf(secretID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: projectID
func (_m *SecretService) List(projectID models.ID) ([]*models.Secret, error) {
	ret := _m.Called(projectID)

	var r0 []*models.Secret
	if rf, ok := ret.Get(0).(func(models.ID) []*models.Secret); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: secret
func (_m *SecretService) Update(secret *models.Secret) (*models.Secret, error) {
	ret := _m.Called(secret)

	var r0 *models.Secret
	if rf, ok := ret.Get(0).(func(*models.Secret) *models.Secret); ok {
		r0 = rf(secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Secret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Secret) error); ok {
		r1 = rf(secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSecretService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSecretService creates a new instance of SecretService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSecretService(t mockConstructorTestingTNewSecretService) *SecretService {
	mock := &SecretService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
